'use strict';var _createClass = function () {function defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}return function (Constructor, protoProps, staticProps) {if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;};}();function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}var log = require('npmlog');
var _ = require('lodash');
var WebSocketServer = require('ws').Server;

log.addLevel('wss', 999, { fg: 'blue', bg: 'black' }, 'wss');
log.heading = 'detox-server';
log.loglevel = 'wss';var

DetoxServer = function () {
  function DetoxServer(port) {_classCallCheck(this, DetoxServer);
    this.wss = new WebSocketServer({ port: port });
    this.sessions = {};

    log.log('info', now() + ':', 'server listening on localhost:' + this.wss.options.port + '...');
    this._setup();
  }_createClass(DetoxServer, [{ key: '_setup', value: function _setup()

    {var _this = this;
      this.wss.on('connection', function (ws) {
        var sessionId = void 0;
        var role = void 0;
        ws.on('message', function (str) {
          try {
            var action = JSON.parse(str);
            if (!action.type) {
              return;
            }
            if (action.type === 'login') {
              if (action.params && action.params.sessionId && action.params.role) {
                sessionId = action.params.sessionId;
                role = action.params.role;
                log.log('wss', now() + ':', 'role=' + role + ' login (sessionId=' + sessionId + ')');
                _.set(_this.sessions, [sessionId, role], ws);
              }
            } else if (sessionId && role) {
              log.log('wss', now() + ':', 'role=' + role + ' action=' + action.type + ' (sessionId=' + sessionId + ')');
              _this.sendToOtherRole(sessionId, role, action);
            }
          } catch (error) {
            log.log('wss', 'Invalid JSON received, cannot parse', error);
          }
        });

        ws.on('close', function () {
          if (sessionId && role) {
            log.log('wss', now() + ':', 'role=' + role + ' disconnect (sessionId=' + sessionId + ')');
            _.set(_this.sessions, [sessionId, role], undefined);
          }
        });
      });
    } }, { key: 'sendAction', value: function sendAction(

    ws, action) {
      ws.send(JSON.stringify(
      action) +
      '\n ');
    } }, { key: 'sendToOtherRole', value: function sendToOtherRole(

    sessionId, role, action) {
      var otherRole = role === 'testee' ? 'tester' : 'testee';
      var ws = _.get(this.sessions, [sessionId, otherRole]);
      if (ws) {
        this.sendAction(ws, action);
      } else {
        log.log('wss', now() + ':', 'role=' + otherRole + ' not connected, cannot fw action (sessionId=' + sessionId + ')');
      }
    } }]);return DetoxServer;}();


function now() {
  return new Date().toTimeString().slice(0, 8);
}

module.exports = DetoxServer;