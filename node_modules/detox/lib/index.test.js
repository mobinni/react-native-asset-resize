'use strict';function _asyncToGenerator(fn) {return function () {var gen = fn.apply(this, arguments);return new Promise(function (resolve, reject) {function step(key, arg) {try {var info = gen[key](arg);var value = info.value;} catch (error) {reject(error);return;}if (info.done) {resolve(value);} else {return Promise.resolve(value).then(function (value) {step("next", value);}, function (err) {step("throw", err);});}}return step("next");});};}var schemes = require('./configurations.mock');
describe('index', function () {
  var detox = void 0;
  beforeEach(function () {
    jest.mock('detox-server');
    jest.mock('./devices/Simulator');
    jest.mock('./client/Client');
    detox = require('./index');
  });

  it('Basic usage', _asyncToGenerator(regeneratorRuntime.mark(function _callee() {return regeneratorRuntime.wrap(function _callee$(_context) {while (1) {switch (_context.prev = _context.next) {case 0:_context.next = 2;return (
              detox.init(schemes.validOneDeviceNoSession));case 2:_context.next = 4;return (
              detox.cleanup());case 4:case 'end':return _context.stop();}}}, _callee, undefined);})));


  it('Basic usage, if detox is undefined, do not throw an error', _asyncToGenerator(regeneratorRuntime.mark(function _callee2() {return regeneratorRuntime.wrap(function _callee2$(_context2) {while (1) {switch (_context2.prev = _context2.next) {case 0:_context2.next = 2;return (
              detox.cleanup());case 2:case 'end':return _context2.stop();}}}, _callee2, undefined);})));

});