'use strict';var defaultSession = function () {var _ref = _asyncToGenerator(regeneratorRuntime.mark(



  function _callee() {return regeneratorRuntime.wrap(function _callee$(_context) {while (1) {switch (_context.prev = _context.next) {case 0:_context.next = 2;return (

              getPort());case 2:_context.t0 = _context.sent;_context.t1 = 'ws://localhost:' + _context.t0;_context.t2 =
            uuid.UUID();return _context.abrupt('return', { server: _context.t1, sessionId: _context.t2 });case 6:case 'end':return _context.stop();}}}, _callee, this);}));return function defaultSession() {return _ref.apply(this, arguments);};}();function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self, call) {if (!self) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call && (typeof call === "object" || typeof call === "function") ? call : self;}function _inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;}function _asyncToGenerator(fn) {return function () {var gen = fn.apply(this, arguments);return new Promise(function (resolve, reject) {function step(key, arg) {try {var info = gen[key](arg);var value = info.value;} catch (error) {reject(error);return;}if (info.done) {resolve(value);} else {return Promise.resolve(value).then(function (value) {step("next", value);}, function (err) {step("throw", err);});}}return step("next");});};}var CustomError = require('./errors/CustomError');var uuid = require('./utils/uuid');var getPort = require('get-port');



function validateSession(session) {
  if (!session) {
    throw new Error('No session configuration was found, pass settings under the session property');
  }

  if (!session.server) {
    throw new Error('session.server property is missing, should hold the server address');
  }

  if (!session.sessionId) {
    throw new Error('session.sessionId property is missing, should hold the server session id');
  }
}

function throwOnEmptyName() {
  throw new DetoxConfigError('\'name\' property is missing, should hold the device name to run on (e.g. "iPhone 7", "iPhone 7, iOS 10.2"');
}

//function throwOnEmptyType() {
//  throw new DetoxConfigError(`'type' property is missing, should hold the device type to test on (currently only simulator is supported)`);
//}

function throwOnEmptyBinaryPath() {
  throw new DetoxConfigError('\'binaryPath\' property is missing, should hold the app binary path');
}

//function throwOnEmptyConfig() {
//  throw new DetoxConfigError(`No scheme was found, in order to test a device pass settings under detox property, e.g.
//           "detox": {
//              ...
//              "configurations": {
//                "ios.sim.release": {
//                  "binaryPath": "path/to/app",
//                  "build": "your buildscript here",
//                  "type": "ios.simulator",
//                  "name": "iPhone 7 Plus"
//                }
//              }`);
//}
var
DetoxConfigError = function (_CustomError) {_inherits(DetoxConfigError, _CustomError);function DetoxConfigError() {_classCallCheck(this, DetoxConfigError);return _possibleConstructorReturn(this, (DetoxConfigError.__proto__ || Object.getPrototypeOf(DetoxConfigError)).apply(this, arguments));}return DetoxConfigError;}(CustomError);



module.exports = {
  defaultSession: defaultSession,
  validateSession: validateSession,
  throwOnEmptyName: throwOnEmptyName,
  //throwOnEmptyType,
  throwOnEmptyBinaryPath: throwOnEmptyBinaryPath
  //throwOnEmptyConfig
};