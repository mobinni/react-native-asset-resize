'use strict';var _createClass = function () {function defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}return function (Constructor, protoProps, staticProps) {if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;};}();function _asyncToGenerator(fn) {return function () {var gen = fn.apply(this, arguments);return new Promise(function (resolve, reject) {function step(key, arg) {try {var info = gen[key](arg);var value = info.value;} catch (error) {reject(error);return;}if (info.done) {resolve(value);} else {return Promise.resolve(value).then(function (value) {step("next", value);}, function (err) {step("throw", err);});}}return step("next");});};}function _possibleConstructorReturn(self, call) {if (!self) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call && (typeof call === "object" || typeof call === "function") ? call : self;}function _inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}var Action = function () {
  function Action(type) {var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};_classCallCheck(this, Action);
    this.type = type;
    this.params = params;
    this.messageId;
  }_createClass(Action, [{ key: 'expectResponseOfType', value: function expectResponseOfType(

    response, type) {
      if (response.type !== type) {
        throw new Error('was expecting \'' + type + '\' , got ' + JSON.stringify(response));
      }
    } }]);return Action;}();var



Login = function (_Action) {_inherits(Login, _Action);
  function Login(sessionId) {_classCallCheck(this, Login);
    var params = {
      sessionId: sessionId,
      role: 'tester' };return _possibleConstructorReturn(this, (Login.__proto__ || Object.getPrototypeOf(Login)).call(this,

    'login', params));
  }_createClass(Login, [{ key: 'handle', value: function () {var _ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee(

      response) {return regeneratorRuntime.wrap(function _callee$(_context) {while (1) {switch (_context.prev = _context.next) {case 0:
                this.expectResponseOfType(response, 'ready');case 1:case 'end':return _context.stop();}}}, _callee, this);}));function handle(_x2) {return _ref.apply(this, arguments);}return handle;}() }]);return Login;}(Action);var



Ready = function (_Action2) {_inherits(Ready, _Action2);
  function Ready() {_classCallCheck(this, Ready);return _possibleConstructorReturn(this, (Ready.__proto__ || Object.getPrototypeOf(Ready)).call(this,
    'isReady'));
  }_createClass(Ready, [{ key: 'handle', value: function () {var _ref2 = _asyncToGenerator(regeneratorRuntime.mark(function _callee2(

      response) {return regeneratorRuntime.wrap(function _callee2$(_context2) {while (1) {switch (_context2.prev = _context2.next) {case 0:
                this.expectResponseOfType(response, 'ready');case 1:case 'end':return _context2.stop();}}}, _callee2, this);}));function handle(_x3) {return _ref2.apply(this, arguments);}return handle;}() }]);return Ready;}(Action);var



ReloadReactNative = function (_Action3) {_inherits(ReloadReactNative, _Action3);
  function ReloadReactNative() {_classCallCheck(this, ReloadReactNative);return _possibleConstructorReturn(this, (ReloadReactNative.__proto__ || Object.getPrototypeOf(ReloadReactNative)).call(this,
    'reactNativeReload'));
  }_createClass(ReloadReactNative, [{ key: 'handle', value: function () {var _ref3 = _asyncToGenerator(regeneratorRuntime.mark(function _callee3(

      response) {return regeneratorRuntime.wrap(function _callee3$(_context3) {while (1) {switch (_context3.prev = _context3.next) {case 0:
                this.expectResponseOfType(response, 'ready');case 1:case 'end':return _context3.stop();}}}, _callee3, this);}));function handle(_x4) {return _ref3.apply(this, arguments);}return handle;}() }]);return ReloadReactNative;}(Action);var



Cleanup = function (_Action4) {_inherits(Cleanup, _Action4);
  function Cleanup() {_classCallCheck(this, Cleanup);return _possibleConstructorReturn(this, (Cleanup.__proto__ || Object.getPrototypeOf(Cleanup)).call(this,
    'cleanup'));
  }_createClass(Cleanup, [{ key: 'handle', value: function () {var _ref4 = _asyncToGenerator(regeneratorRuntime.mark(function _callee4(

      response) {return regeneratorRuntime.wrap(function _callee4$(_context4) {while (1) {switch (_context4.prev = _context4.next) {case 0:
                this.expectResponseOfType(response, 'cleanupDone');case 1:case 'end':return _context4.stop();}}}, _callee4, this);}));function handle(_x5) {return _ref4.apply(this, arguments);}return handle;}() }]);return Cleanup;}(Action);var



Invoke = function (_Action5) {_inherits(Invoke, _Action5);
  function Invoke(params) {_classCallCheck(this, Invoke);return _possibleConstructorReturn(this, (Invoke.__proto__ || Object.getPrototypeOf(Invoke)).call(this,
    'invoke', params));
  }_createClass(Invoke, [{ key: 'handle', value: function () {var _ref5 = _asyncToGenerator(regeneratorRuntime.mark(function _callee5(

      response) {return regeneratorRuntime.wrap(function _callee5$(_context5) {while (1) {switch (_context5.prev = _context5.next) {case 0:_context5.t0 =
                response.type;_context5.next = _context5.t0 ===
                'testFailed' ? 3 : _context5.t0 ===

                'invokeResult' ? 4 : _context5.t0 ===

                'error' ? 5 : 6;break;case 3:throw new Error(response.params.details);case 4:return _context5.abrupt('break', 7);case 5:throw (
                  new Error(response.params.error));case 6:throw (

                  new Error('got an unsupported message from testee: ' + JSON.stringify(response)));case 7:case 'end':return _context5.stop();}}}, _callee5, this);}));function handle(_x6) {return _ref5.apply(this, arguments);}return handle;}() }]);return Invoke;}(Action);var




SendUserNotification = function (_Action6) {_inherits(SendUserNotification, _Action6);
  function SendUserNotification(params) {_classCallCheck(this, SendUserNotification);return _possibleConstructorReturn(this, (SendUserNotification.__proto__ || Object.getPrototypeOf(SendUserNotification)).call(this,
    'userNotification', params));
  }_createClass(SendUserNotification, [{ key: 'handle', value: function () {var _ref6 = _asyncToGenerator(regeneratorRuntime.mark(function _callee6(

      response) {return regeneratorRuntime.wrap(function _callee6$(_context6) {while (1) {switch (_context6.prev = _context6.next) {case 0:
                this.expectResponseOfType(response, 'userNotificationDone');case 1:case 'end':return _context6.stop();}}}, _callee6, this);}));function handle(_x7) {return _ref6.apply(this, arguments);}return handle;}() }]);return SendUserNotification;}(Action);



module.exports = {
  Login: Login,
  Ready: Ready,
  Invoke: Invoke,
  ReloadReactNative: ReloadReactNative,
  Cleanup: Cleanup,
  SendUserNotification: SendUserNotification };