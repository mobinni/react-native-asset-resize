'use strict';var _createClass = function () {function defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}return function (Constructor, protoProps, staticProps) {if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;};}();function _asyncToGenerator(fn) {return function () {var gen = fn.apply(this, arguments);return new Promise(function (resolve, reject) {function step(key, arg) {try {var info = gen[key](arg);var value = info.value;} catch (error) {reject(error);return;}if (info.done) {resolve(value);} else {return Promise.resolve(value).then(function (value) {step("next", value);}, function (err) {step("throw", err);});}}return step("next");});};}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}var log = require('npmlog');
var WebSocket = require('ws');var

AsyncWebSocket = function () {

  function AsyncWebSocket(url) {_classCallCheck(this, AsyncWebSocket);
    this.url = url;
    this.ws = undefined;
    this.inFlightPromise = {};
  }_createClass(AsyncWebSocket, [{ key: 'open', value: function () {var _ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee2() {var _this = this;return regeneratorRuntime.wrap(function _callee2$(_context2) {while (1) {switch (_context2.prev = _context2.next) {case 0:return _context2.abrupt('return',


                new Promise(function () {var _ref2 = _asyncToGenerator(regeneratorRuntime.mark(function _callee(resolve, reject) {return regeneratorRuntime.wrap(function _callee$(_context) {while (1) {switch (_context.prev = _context.next) {case 0:
                            _this.ws = new WebSocket(_this.url);
                            _this.ws.onopen = function (response) {
                              log.verbose('ws', 'onOpen ' + response);
                              resolve(response);
                            };

                            _this.ws.onerror = function (error) {
                              log.error('ws', 'onError: ' + error);
                              _this.inFlightPromise.reject(error);
                            };

                            _this.ws.onmessage = function (response) {
                              log.verbose('ws', 'onMessage: ' + response.data);
                              _this.inFlightPromise.resolve(response.data);
                            };

                            _this.inFlightPromise.resolve = resolve;
                            _this.inFlightPromise.reject = reject;case 6:case 'end':return _context.stop();}}}, _callee, _this);}));return function (_x, _x2) {return _ref2.apply(this, arguments);};}()));case 1:case 'end':return _context2.stop();}}}, _callee2, this);}));function open() {return _ref.apply(this, arguments);}return open;}() }, { key: 'send', value: function () {var _ref3 = _asyncToGenerator(regeneratorRuntime.mark(function _callee4(



      message) {var _this2 = this;return regeneratorRuntime.wrap(function _callee4$(_context4) {while (1) {switch (_context4.prev = _context4.next) {case 0:if (
                this.ws) {_context4.next = 2;break;}throw (
                  new Error('Can\'t send a message on a closed websocket, init the by calling \'open()\''));case 2:return _context4.abrupt('return',


                new Promise(function () {var _ref4 = _asyncToGenerator(regeneratorRuntime.mark(function _callee3(resolve, reject) {return regeneratorRuntime.wrap(function _callee3$(_context3) {while (1) {switch (_context3.prev = _context3.next) {case 0:
                            log.verbose('ws', 'send: ' + message);
                            _this2.inFlightPromise.resolve = resolve;
                            _this2.inFlightPromise.reject = reject;
                            _this2.ws.send(message);case 4:case 'end':return _context3.stop();}}}, _callee3, _this2);}));return function (_x4, _x5) {return _ref4.apply(this, arguments);};}()));case 3:case 'end':return _context4.stop();}}}, _callee4, this);}));function send(_x3) {return _ref3.apply(this, arguments);}return send;}() }, { key: 'close', value: function () {var _ref5 = _asyncToGenerator(regeneratorRuntime.mark(function _callee6() {var _this3 = this;return regeneratorRuntime.wrap(function _callee6$(_context6) {while (1) {switch (_context6.prev = _context6.next) {case 0:return _context6.abrupt('return',




                new Promise(function () {var _ref6 = _asyncToGenerator(regeneratorRuntime.mark(function _callee5(resolve, reject) {return regeneratorRuntime.wrap(function _callee5$(_context5) {while (1) {switch (_context5.prev = _context5.next) {case 0:
                            if (_this3.ws) {
                              _this3.ws.onclose = function (message) {
                                _this3.ws = null;
                                resolve(message);
                              };

                              if (_this3.ws.readyState !== WebSocket.CLOSED) {
                                _this3.ws.close();
                              } else {
                                _this3.ws.onclose();
                              }
                            } else {
                              reject(new Error('websocket is closed, init the by calling \'open()\''));
                            }case 1:case 'end':return _context5.stop();}}}, _callee5, _this3);}));return function (_x6, _x7) {return _ref6.apply(this, arguments);};}()));case 1:case 'end':return _context6.stop();}}}, _callee6, this);}));function close() {return _ref5.apply(this, arguments);}return close;}() }, { key: 'isOpen', value: function isOpen()



    {
      if (!this.ws) {
        return false;
      }
      return this.ws.readyState === WebSocket.OPEN;
    } }]);return AsyncWebSocket;}();


module.exports = AsyncWebSocket;