'use strict';function _asyncToGenerator(fn) {return function () {var gen = fn.apply(this, arguments);return new Promise(function (resolve, reject) {function step(key, arg) {try {var info = gen[key](arg);var value = info.value;} catch (error) {reject(error);return;}if (info.done) {resolve(value);} else {return Promise.resolve(value).then(function (value) {step("next", value);}, function (err) {step("throw", err);});}}return step("next");});};}var validScheme = require('../configurations.mock').validOneDeviceAndSession;

describe('Device', function () {
  var Client = void 0;
  var Device = void 0;
  var device = void 0;

  var argparse = void 0;

  beforeEach(function () {
    jest.mock('../utils/argparse');
    argparse = require('../utils/argparse');

    jest.mock('../client/Client');
    Client = require('../client/Client');
    Device = require('./Device');
    device = new Device(new Client(), validScheme);
  });

  it('reloadReactNative() - should trigger reloadReactNative in websocket client', function () {
    device.reloadReactNative();
    expect(device.client.reloadReactNative).toHaveBeenCalledTimes(1);
  });

  it('sendUserNotification() - should trigger sendUserNotification in websocket client', function () {
    var params = { some: "params" };
    device.sendUserNotification(params);
    expect(device.client.sendUserNotification).toHaveBeenCalledWith(params);
  });

  it('relaunchApp() - should trigger waitUntilReady in websocket client', function () {
    device.prepare();
    expect(device.client.waitUntilReady).toHaveBeenCalledTimes(1);
  });

  it('relaunchApp() - should be defined', _asyncToGenerator(regeneratorRuntime.mark(function _callee() {return regeneratorRuntime.wrap(function _callee$(_context) {while (1) {switch (_context.prev = _context.next) {case 0:_context.t0 =
            expect;_context.next = 3;return device.relaunchApp();case 3:_context.t1 = _context.sent;(0, _context.t0)(_context.t1).toBeDefined();case 5:case 'end':return _context.stop();}}}, _callee, undefined);})));


  it('installApp() - should be defined', _asyncToGenerator(regeneratorRuntime.mark(function _callee2() {return regeneratorRuntime.wrap(function _callee2$(_context2) {while (1) {switch (_context2.prev = _context2.next) {case 0:_context2.t0 =
            expect;_context2.next = 3;return device.installApp();case 3:_context2.t1 = _context2.sent;(0, _context2.t0)(_context2.t1).toBeDefined();case 5:case 'end':return _context2.stop();}}}, _callee2, undefined);})));


  it('uninstallApp() - should be defined', _asyncToGenerator(regeneratorRuntime.mark(function _callee3() {return regeneratorRuntime.wrap(function _callee3$(_context3) {while (1) {switch (_context3.prev = _context3.next) {case 0:_context3.t0 =
            expect;_context3.next = 3;return device.uninstallApp();case 3:_context3.t1 = _context3.sent;(0, _context3.t0)(_context3.t1).toBeDefined();case 5:case 'end':return _context3.stop();}}}, _callee3, undefined);})));


  it('shutdown() - should be defined', _asyncToGenerator(regeneratorRuntime.mark(function _callee4() {return regeneratorRuntime.wrap(function _callee4$(_context4) {while (1) {switch (_context4.prev = _context4.next) {case 0:_context4.t0 =
            expect;_context4.next = 3;return device.shutdown();case 3:_context4.t1 = _context4.sent;(0, _context4.t0)(_context4.t1).toBeDefined();case 5:case 'end':return _context4.stop();}}}, _callee4, undefined);})));


  it('openURL() - should be defined', _asyncToGenerator(regeneratorRuntime.mark(function _callee5() {return regeneratorRuntime.wrap(function _callee5$(_context5) {while (1) {switch (_context5.prev = _context5.next) {case 0:_context5.t0 =
            expect;_context5.next = 3;return device.openURL();case 3:_context5.t1 = _context5.sent;(0, _context5.t0)(_context5.t1).toBeDefined();case 5:case 'end':return _context5.stop();}}}, _callee5, undefined);})));

});