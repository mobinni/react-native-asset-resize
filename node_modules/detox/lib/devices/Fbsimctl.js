'use strict';var _createClass = function () {function defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}return function (Constructor, protoProps, staticProps) {if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;};}();function _asyncToGenerator(fn) {return function () {var gen = fn.apply(this, arguments);return new Promise(function (resolve, reject) {function step(key, arg) {try {var info = gen[key](arg);var value = info.value;} catch (error) {reject(error);return;}if (info.done) {resolve(value);} else {return Promise.resolve(value).then(function (value) {step("next", value);}, function (err) {step("throw", err);});}}return step("next");});};}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}var path = require('path');
var fs = require('fs');
var _ = require('lodash');
var log = require('npmlog');
var exec = require('../utils/exec');

// FBSimulatorControl command line docs
// https://github.com/facebook/FBSimulatorControl/issues/250
// https://github.com/facebook/FBSimulatorControl/blob/master/fbsimctl/FBSimulatorControlKitTests/Tests/Unit/CommandParsersTests.swift
var
Fbsimctl = function () {

  function Fbsimctl() {_classCallCheck(this, Fbsimctl);
    this._operationCounter = 0;
  }_createClass(Fbsimctl, [{ key: 'list', value: function () {var _ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee(

      device) {var statusLogs, query, options, result, simId, parsedJson;return regeneratorRuntime.wrap(function _callee$(_context) {while (1) {switch (_context.prev = _context.next) {case 0:
                statusLogs = {
                  trying: 'Listing devices...' };

                query = this._getQueryFromDevice(device);
                options = { args: query + ' --first 1 --simulators list' };
                result = {};
                simId = void 0;_context.prev = 5;_context.next = 8;return (

                  this._execFbsimctlCommand(options, statusLogs, 1));case 8:result = _context.sent;
                parsedJson = JSON.parse(result.stdout);
                simId = _.get(parsedJson, 'subject.udid');_context.next = 16;break;case 13:_context.prev = 13;_context.t0 = _context['catch'](5);

                log.error(_context.t0);case 16:if (


                simId) {_context.next = 18;break;}throw (
                  new Error('Can\'t find a simulator to match with \'' + device + '\', run \'fbsimctl list\' to list your supported devices.\n' +
                  'It is advised to only state a device type, and not to state iOS version, e.g. \'iPhone 7\''));case 18:return _context.abrupt('return',


                simId);case 19:case 'end':return _context.stop();}}}, _callee, this, [[5, 13]]);}));function list(_x) {return _ref.apply(this, arguments);}return list;}() }, { key: 'boot', value: function () {var _ref2 = _asyncToGenerator(regeneratorRuntime.mark(function _callee2(


      udid) {var statusLogs, options;return regeneratorRuntime.wrap(function _callee2$(_context2) {while (1) {switch (_context2.prev = _context2.next) {case 0:
                statusLogs = {
                  trying: 'trying to boot device...',
                  successful: 'device ' + udid + ' booted' };


                options = { args: '--state=shutdown --state=shutting-down ' + udid + ' boot' };_context2.next = 4;return (
                  this._execFbsimctlCommand(options, statusLogs));case 4:return _context2.abrupt('return', _context2.sent);case 5:case 'end':return _context2.stop();}}}, _callee2, this);}));function boot(_x2) {return _ref2.apply(this, arguments);}return boot;}() }, { key: 'install', value: function () {var _ref3 = _asyncToGenerator(regeneratorRuntime.mark(function _callee3(


      udid, absPath) {var statusLogs, options;return regeneratorRuntime.wrap(function _callee3$(_context3) {while (1) {switch (_context3.prev = _context3.next) {case 0:
                statusLogs = {
                  trying: 'Installing ' + absPath + '...',
                  successful: absPath + ' installed' };

                options = { args: udid + ' install ' + absPath };_context3.next = 4;return (
                  this._execFbsimctlCommand(options, statusLogs));case 4:return _context3.abrupt('return', _context3.sent);case 5:case 'end':return _context3.stop();}}}, _callee3, this);}));function install(_x3, _x4) {return _ref3.apply(this, arguments);}return install;}() }, { key: 'uninstall', value: function () {var _ref4 = _asyncToGenerator(regeneratorRuntime.mark(function _callee4(


      udid, bundleId) {var statusLogs, options;return regeneratorRuntime.wrap(function _callee4$(_context4) {while (1) {switch (_context4.prev = _context4.next) {case 0:
                statusLogs = {
                  trying: 'Uninstalling ' + bundleId + '...',
                  successful: bundleId + ' uninstalled' };

                options = { args: udid + ' uninstall ' + bundleId };_context4.prev = 2;_context4.next = 5;return (

                  this._execFbsimctlCommand(options, statusLogs, 1));case 5:_context4.next = 9;break;case 7:_context4.prev = 7;_context4.t0 = _context4['catch'](2);case 9:case 'end':return _context4.stop();}}}, _callee4, this, [[2, 7]]);}));function uninstall(_x5, _x6) {return _ref4.apply(this, arguments);}return uninstall;}() }, { key: 'launch', value: function () {var _ref5 = _asyncToGenerator(regeneratorRuntime.mark(function _callee5(





      udid, bundleId, launchArgs) {var statusLogs, options, result;return regeneratorRuntime.wrap(function _callee5$(_context5) {while (1) {switch (_context5.prev = _context5.next) {case 0:
                statusLogs = {
                  trying: 'Launching ' + bundleId + '...',
                  successful: bundleId + ' launched' };

                options = {
                  prefix: 'export FBSIMCTL_CHILD_DYLD_INSERT_LIBRARIES="' + this._getFrameworkPath() + '"',
                  args: udid + ' launch --stderr ' + bundleId + ' ' + launchArgs.join(' ') };_context5.next = 4;return (

                  this._execFbsimctlCommand(options, statusLogs));case 4:result = _context5.sent;case 5:case 'end':return _context5.stop();}}}, _callee5, this);}));function launch(_x7, _x8, _x9) {return _ref5.apply(this, arguments);}return launch;}() }, { key: 'terminate', value: function () {var _ref6 = _asyncToGenerator(regeneratorRuntime.mark(function _callee6(




      udid, bundleId) {var statusLogs, options, result;return regeneratorRuntime.wrap(function _callee6$(_context6) {while (1) {switch (_context6.prev = _context6.next) {case 0:
                statusLogs = {
                  trying: 'Terminating ' + bundleId + '...',
                  successful: bundleId + ' terminated' };

                options = { args: udid + '  terminate ' + bundleId };_context6.prev = 2;_context6.next = 5;return (

                  this._execFbsimctlCommand(options, statusLogs, 1));case 5:result = _context6.sent;_context6.next = 10;break;case 8:_context6.prev = 8;_context6.t0 = _context6['catch'](2);case 10:case 'end':return _context6.stop();}}}, _callee6, this, [[2, 8]]);}));function terminate(_x10, _x11) {return _ref6.apply(this, arguments);}return terminate;}() }, { key: 'shutdown', value: function () {var _ref7 = _asyncToGenerator(regeneratorRuntime.mark(function _callee7(







      udid) {var options;return regeneratorRuntime.wrap(function _callee7$(_context7) {while (1) {switch (_context7.prev = _context7.next) {case 0:
                options = { args: udid + ' shutdown' };_context7.next = 3;return (
                  this._execFbsimctlCommand(options));case 3:case 'end':return _context7.stop();}}}, _callee7, this);}));function shutdown(_x12) {return _ref7.apply(this, arguments);}return shutdown;}() }, { key: 'open', value: function () {var _ref8 = _asyncToGenerator(regeneratorRuntime.mark(function _callee8(


      udid, url) {var options;return regeneratorRuntime.wrap(function _callee8$(_context8) {while (1) {switch (_context8.prev = _context8.next) {case 0:
                options = { args: udid + ' open ' + url };_context8.next = 3;return (
                  this._execFbsimctlCommand(options));case 3:case 'end':return _context8.stop();}}}, _callee8, this);}));function open(_x13, _x14) {return _ref8.apply(this, arguments);}return open;}() }, { key: 'isDeviceBooted', value: function () {var _ref9 = _asyncToGenerator(regeneratorRuntime.mark(function _callee9(


      udid) {var options, result;return regeneratorRuntime.wrap(function _callee9$(_context9) {while (1) {switch (_context9.prev = _context9.next) {case 0:
                options = { args: udid + ' list' };_context9.next = 3;return (
                  this._execFbsimctlCommand(options));case 3:result = _context9.sent;return _context9.abrupt('return',
                JSON.parse(result.stdout).subject.state !== 'Booted');case 5:case 'end':return _context9.stop();}}}, _callee9, this);}));function isDeviceBooted(_x15) {return _ref9.apply(this, arguments);}return isDeviceBooted;}() }, { key: '_execFbsimctlCommand', value: function () {var _ref10 = _asyncToGenerator(regeneratorRuntime.mark(function _callee10(


      options, statusLogs, retries, interval) {var bin;return regeneratorRuntime.wrap(function _callee10$(_context10) {while (1) {switch (_context10.prev = _context10.next) {case 0:
                bin = 'fbsimctl --json';_context10.next = 3;return (
                  exec.execWithRetriesAndLogs(bin, options, statusLogs, retries, interval));case 3:return _context10.abrupt('return', _context10.sent);case 4:case 'end':return _context10.stop();}}}, _callee10, this);}));function _execFbsimctlCommand(_x16, _x17, _x18, _x19) {return _ref10.apply(this, arguments);}return _execFbsimctlCommand;}() }, { key: '_getFrameworkPath', value: function _getFrameworkPath()


    {
      var frameworkPath = path.join(__dirname, '/../../Detox.framework/Detox');
      if (!fs.existsSync(frameworkPath)) {
        throw new Error('Detox.framework not found at ' + frameworkPath);
      }
      return frameworkPath;
    } }, { key: '_getQueryFromDevice', value: function _getQueryFromDevice(

    device) {
      var res = '';
      var deviceParts = device.split(',');
      for (var i = 0; i < deviceParts.length; i++) {
        res += '"' + deviceParts[i].trim() + '" ';
      }
      return res.trim();
    } }]);return Fbsimctl;}();


module.exports = Fbsimctl;