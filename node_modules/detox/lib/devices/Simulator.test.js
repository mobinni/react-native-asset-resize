'use strict';function _asyncToGenerator(fn) {return function () {var gen = fn.apply(this, arguments);return new Promise(function (resolve, reject) {function step(key, arg) {try {var info = gen[key](arg);var value = info.value;} catch (error) {reject(error);return;}if (info.done) {resolve(value);} else {return Promise.resolve(value).then(function (value) {step("next", value);}, function (err) {step("throw", err);});}}return step("next");});};}var _ = require('lodash');
var validScheme = require('../configurations.mock').validOneDeviceAndSession;
var invalidDeviceNoBinary = require('../configurations.mock').invalidDeviceNoBinary;
var invalidDeviceNoDeviceName = require('../configurations.mock').invalidDeviceNoDeviceName;

describe('Simulator', function () {
  var fs = void 0;
  var ws = void 0;
  var cpp = void 0;
  var Simulator = void 0;
  var simulator = void 0;
  var argparse = void 0;

  var Client = void 0;
  var client = void 0;

  beforeEach(_asyncToGenerator(regeneratorRuntime.mark(function _callee() {return regeneratorRuntime.wrap(function _callee$(_context) {while (1) {switch (_context.prev = _context.next) {case 0:
            jest.mock('fs');
            fs = require('fs');

            jest.mock('child-process-promise');
            cpp = require('child-process-promise');

            jest.mock('./Fbsimctl');

            jest.mock('../client/Client');
            jest.mock('../utils/argparse');
            argparse = require('../utils/argparse');

            Client = require('../client/Client');

            Simulator = require('./Simulator');

            client = new Client(validScheme.session);_context.next = 13;return (
              client.connect());case 13:case 'end':return _context.stop();}}}, _callee, undefined);})));


  function validSimulator() {
    return new Simulator(client, validScheme.session, validScheme.configurations['ios.sim.release']);
  }

  it('prepare() should boot a device', _asyncToGenerator(regeneratorRuntime.mark(function _callee2() {return regeneratorRuntime.wrap(function _callee2$(_context2) {while (1) {switch (_context2.prev = _context2.next) {case 0:
            simulator = validSimulator();
            simulator._getBundleIdFromApp = jest.fn();
            simulator._getAppAbsolutePath = jest.fn();_context2.next = 5;return (

              simulator.prepare());case 5:

            expect(simulator._fbsimctl.boot).toHaveBeenCalledTimes(1);case 6:case 'end':return _context2.stop();}}}, _callee2, undefined);})));


  it('prepare() with wrong app path should throw', _asyncToGenerator(regeneratorRuntime.mark(function _callee3() {return regeneratorRuntime.wrap(function _callee3$(_context3) {while (1) {switch (_context3.prev = _context3.next) {case 0:
            simulator = validSimulator();
            fs.existsSync.mockReturnValueOnce(false);_context3.prev = 2;_context3.next = 5;return (


              simulator.prepare());case 5:_context3.next = 10;break;case 7:_context3.prev = 7;_context3.t0 = _context3['catch'](2);

            expect(_context3.t0).toBeDefined();case 10:case 'end':return _context3.stop();}}}, _callee3, undefined, [[2, 7]]);})));



  it('prepare() with an app with no plist.info should throw', _asyncToGenerator(regeneratorRuntime.mark(function _callee4() {return regeneratorRuntime.wrap(function _callee4$(_context4) {while (1) {switch (_context4.prev = _context4.next) {case 0:
            simulator = validSimulator();
            fs.existsSync.mockReturnValueOnce(true);_context4.prev = 2;_context4.next = 5;return (


              simulator.prepare());case 5:_context4.next = 10;break;case 7:_context4.prev = 7;_context4.t0 = _context4['catch'](2);

            expect(_context4.t0).toBeDefined();case 10:case 'end':return _context4.stop();}}}, _callee4, undefined, [[2, 7]]);})));



  it('init Simulator with invalid binaryPath should throw', _asyncToGenerator(regeneratorRuntime.mark(function _callee5() {return regeneratorRuntime.wrap(function _callee5$(_context5) {while (1) {switch (_context5.prev = _context5.next) {case 0:
            expect(function () {return new Simulator(client, invalidDeviceNoBinary.session, invalidDeviceNoBinary.configurations['ios.sim.release']);}).toThrow();case 1:case 'end':return _context5.stop();}}}, _callee5, undefined);})));


  it('init Simulator with invalid binaryPath should throw', _asyncToGenerator(regeneratorRuntime.mark(function _callee6() {return regeneratorRuntime.wrap(function _callee6$(_context6) {while (1) {switch (_context6.prev = _context6.next) {case 0:
            expect(function () {return new Simulator(client, invalidDeviceNoDeviceName.session, invalidDeviceNoDeviceName.configurations['ios.sim.release']);}).toThrow();case 1:case 'end':return _context6.stop();}}}, _callee6, undefined);})));


  it('relaunchApp()', _asyncToGenerator(regeneratorRuntime.mark(function _callee7() {return regeneratorRuntime.wrap(function _callee7$(_context7) {while (1) {switch (_context7.prev = _context7.next) {case 0:
            simulator = validSimulator();_context7.next = 3;return (
              simulator.relaunchApp());case 3:

            expect(simulator._fbsimctl.terminate).toHaveBeenCalled();
            expect(simulator._fbsimctl.launch).toHaveBeenCalledWith(simulator._simulatorUdid,
            simulator._bundleId,
            ["-detoxServer", "ws://localhost:8099", "-detoxSessionId", "test"]);case 5:case 'end':return _context7.stop();}}}, _callee7, undefined);})));


  it('relaunchApp() with delete=true', _asyncToGenerator(regeneratorRuntime.mark(function _callee8() {return regeneratorRuntime.wrap(function _callee8$(_context8) {while (1) {switch (_context8.prev = _context8.next) {case 0:
            simulator = validSimulator();
            fs.existsSync.mockReturnValue(true);_context8.next = 4;return (

              simulator.relaunchApp({ delete: true }));case 4:

            expect(simulator._fbsimctl.uninstall).toHaveBeenCalled();
            expect(simulator._fbsimctl.install).toHaveBeenCalled();
            expect(simulator._fbsimctl.launch).toHaveBeenCalledWith(simulator._simulatorUdid,
            simulator._bundleId,
            ["-detoxServer", "ws://localhost:8099", "-detoxSessionId", "test"]);case 7:case 'end':return _context8.stop();}}}, _callee8, undefined);})));



  it('relaunchApp() without delete when reuse is enabled should not uninstall and install', _asyncToGenerator(regeneratorRuntime.mark(function _callee9() {return regeneratorRuntime.wrap(function _callee9$(_context9) {while (1) {switch (_context9.prev = _context9.next) {case 0:
            simulator = validSimulator();
            argparse.getArgValue.mockReturnValue(true);
            fs.existsSync.mockReturnValue(true);_context9.next = 5;return (

              simulator.relaunchApp());case 5:

            expect(simulator._fbsimctl.uninstall).not.toHaveBeenCalled();
            expect(simulator._fbsimctl.install).not.toHaveBeenCalled();
            expect(simulator._fbsimctl.launch).toHaveBeenCalledWith(simulator._simulatorUdid,
            simulator._bundleId,
            ["-detoxServer", "ws://localhost:8099", "-detoxSessionId", "test"]);case 8:case 'end':return _context9.stop();}}}, _callee9, undefined);})));


  it('relaunchApp() with url should send the url as a param in launchParams', _asyncToGenerator(regeneratorRuntime.mark(function _callee10() {return regeneratorRuntime.wrap(function _callee10$(_context10) {while (1) {switch (_context10.prev = _context10.next) {case 0:
            simulator = validSimulator();_context10.next = 3;return (
              simulator.relaunchApp({ url: 'scheme://some.url' }));case 3:

            expect(simulator._fbsimctl.launch).toHaveBeenCalledWith(simulator._simulatorUdid,
            simulator._bundleId,
            ["-detoxServer", "ws://localhost:8099", "-detoxSessionId", "test", "-detoxURLOverride", "scheme://some.url"]);case 4:case 'end':return _context10.stop();}}}, _callee10, undefined);})));


  it('relaunchApp() with userNofitication should send the userNotification as a param in launchParams', _asyncToGenerator(regeneratorRuntime.mark(function _callee11() {return regeneratorRuntime.wrap(function _callee11$(_context11) {while (1) {switch (_context11.prev = _context11.next) {case 0:
            simulator = validSimulator();
            fs.existsSync.mockReturnValue(true);
            simulator.createPushNotificationJson = jest.fn(function () {return 'url';});_context11.next = 5;return (

              simulator.relaunchApp({ userNotification: notification }));case 5:

            expect(simulator._fbsimctl.launch).toHaveBeenCalledWith(simulator._simulatorUdid,
            simulator._bundleId,
            ["-detoxServer", "ws://localhost:8099", "-detoxSessionId", "test", "-detoxUserNotificationDataURL", "url"]);case 6:case 'end':return _context11.stop();}}}, _callee11, undefined);})));


  it('relaunchApp() with url and userNofitication should throw', _asyncToGenerator(regeneratorRuntime.mark(function _callee12() {return regeneratorRuntime.wrap(function _callee12$(_context12) {while (1) {switch (_context12.prev = _context12.next) {case 0:
            simulator = validSimulator();_context12.prev = 1;_context12.next = 4;return (

              simulator.relaunchApp({ url: "scheme://some.url", userNotification: notification }));case 4:_context12.next = 9;break;case 6:_context12.prev = 6;_context12.t0 = _context12['catch'](1);

            expect(_context12.t0).toBeDefined();case 9:case 'end':return _context12.stop();}}}, _callee12, undefined, [[1, 6]]);})));



  it('installApp() should trigger fbsimctl.uinstall', _asyncToGenerator(regeneratorRuntime.mark(function _callee13() {return regeneratorRuntime.wrap(function _callee13$(_context13) {while (1) {switch (_context13.prev = _context13.next) {case 0:
            simulator = validSimulator();
            fs.existsSync.mockReturnValue(true);_context13.next = 4;return (
              simulator.installApp());case 4:
            expect(simulator._fbsimctl.install).toHaveBeenCalledTimes(1);case 5:case 'end':return _context13.stop();}}}, _callee13, undefined);})));


  it('uninstallApp() should trigger fbsimctl.uninstall', _asyncToGenerator(regeneratorRuntime.mark(function _callee14() {return regeneratorRuntime.wrap(function _callee14$(_context14) {while (1) {switch (_context14.prev = _context14.next) {case 0:
            simulator = validSimulator();
            fs.existsSync.mockReturnValue(true);_context14.next = 4;return (
              simulator.uninstallApp());case 4:
            expect(simulator._fbsimctl.uninstall).toHaveBeenCalledTimes(1);case 5:case 'end':return _context14.stop();}}}, _callee14, undefined);})));


  it('reloadReactNative() should trigger client.reloadReactNative', _asyncToGenerator(regeneratorRuntime.mark(function _callee15() {return regeneratorRuntime.wrap(function _callee15$(_context15) {while (1) {switch (_context15.prev = _context15.next) {case 0:
            simulator = validSimulator();_context15.next = 3;return (
              simulator.reloadReactNative());case 3:
            expect(simulator.client.reloadReactNative).toHaveBeenCalledTimes(1);case 4:case 'end':return _context15.stop();}}}, _callee15, undefined);})));


  it('sendUserNotification() should trigger client.sendUserNotification', _asyncToGenerator(regeneratorRuntime.mark(function _callee16() {return regeneratorRuntime.wrap(function _callee16$(_context16) {while (1) {switch (_context16.prev = _context16.next) {case 0:
            simulator = validSimulator();
            fs.existsSync.mockReturnValueOnce(false).mockReturnValueOnce(true);_context16.next = 4;return (
              simulator.sendUserNotification('notification'));case 4:
            expect(simulator.client.sendUserNotification).toHaveBeenCalledTimes(1);case 5:case 'end':return _context16.stop();}}}, _callee16, undefined);})));


  it('shutdown() should trigger fbsimctl.shutdown', _asyncToGenerator(regeneratorRuntime.mark(function _callee17() {return regeneratorRuntime.wrap(function _callee17$(_context17) {while (1) {switch (_context17.prev = _context17.next) {case 0:
            simulator = validSimulator();
            fs.existsSync.mockReturnValue(true);_context17.next = 4;return (
              simulator.shutdown());case 4:
            expect(simulator._fbsimctl.shutdown).toHaveBeenCalledTimes(1);case 5:case 'end':return _context17.stop();}}}, _callee17, undefined);})));


  it('openURL() should trigger fbsimctl.open ', _asyncToGenerator(regeneratorRuntime.mark(function _callee18() {var url;return regeneratorRuntime.wrap(function _callee18$(_context18) {while (1) {switch (_context18.prev = _context18.next) {case 0:
            simulator = validSimulator();
            url = 'url://poof';_context18.next = 4;return (
              simulator.openURL(url));case 4:
            expect(simulator._fbsimctl.open).toHaveBeenCalledWith(simulator._simulatorUdid, url);case 5:case 'end':return _context18.stop();}}}, _callee18, undefined);})));


  it('setOrientation() should throw an error if give wrong input ', _asyncToGenerator(regeneratorRuntime.mark(function _callee19() {return regeneratorRuntime.wrap(function _callee19$(_context19) {while (1) {switch (_context19.prev = _context19.next) {case 0:
            expect.assertions(1);
            simulator = validSimulator();_context19.prev = 2;_context19.next = 5;return (


              simulator.setOrientation('UpsideDown'));case 5:_context19.next = 10;break;case 7:_context19.prev = 7;_context19.t0 = _context19['catch'](2);

            expect(_context19.t0.message).toMatch('setOrientation failed: provided orientation UpsideDown is not part of supported orientations: landscape,portrait');case 10:case 'end':return _context19.stop();}}}, _callee19, undefined, [[2, 7]]);})));



  it('setOrientation() should set the orientation to portrait', _asyncToGenerator(regeneratorRuntime.mark(function _callee20() {var call;return regeneratorRuntime.wrap(function _callee20$(_context20) {while (1) {switch (_context20.prev = _context20.next) {case 0:
            simulator = validSimulator();_context20.next = 3;return (

              simulator.setOrientation('portrait'));case 3:
            expect(client.execute).toHaveBeenCalled();
            call = client.execute.mock.calls[client.execute.mock.calls.length - 1][0]();
            expect(call.target.type).toBe('EarlGrey');
            expect(call.method).toBe('rotateDeviceToOrientation:errorOrNil:');
            expect(call.args[0].value).toBe(1);case 8:case 'end':return _context20.stop();}}}, _callee20, undefined);})));


  it('setOrientation() should set the orientation to landscape', _asyncToGenerator(regeneratorRuntime.mark(function _callee21() {var call;return regeneratorRuntime.wrap(function _callee21$(_context21) {while (1) {switch (_context21.prev = _context21.next) {case 0:
            simulator = validSimulator();_context21.next = 3;return (

              simulator.setOrientation('landscape'));case 3:
            expect(client.execute).toHaveBeenCalled();
            call = client.execute.mock.calls[client.execute.mock.calls.length - 1][0]();
            expect(call.target.type).toBe('EarlGrey');
            expect(call.method).toBe('rotateDeviceToOrientation:errorOrNil:');
            expect(call.args[0].value).toBe(3);case 8:case 'end':return _context21.stop();}}}, _callee21, undefined);})));

});

var notification = {
  "trigger": {
    "type": "timeInterval",
    "timeInterval": 30,
    "repeats": false },

  "title": "Title",
  "subtitle": "Subtitle",
  "body": "Body",
  "badge": 1,
  "payload": {
    "key1": "value1",
    "key2": "value2" },

  "category": "com.example.category",
  "user-text": "Hi there!",
  "content-available": 0,
  "action-identifier": "default2" };