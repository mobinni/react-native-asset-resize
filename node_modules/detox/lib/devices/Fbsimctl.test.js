'use strict';var validateFbsimctlisCalledOn = function () {var _ref24 = _asyncToGenerator(regeneratorRuntime.mark(












































































































































  function _callee24(fbsimctl, func) {return regeneratorRuntime.wrap(function _callee24$(_context24) {while (1) {switch (_context24.prev = _context24.next) {case 0:
            fbsimctl._execFbsimctlCommand = jest.fn();
            func();
            expect(fbsimctl._execFbsimctlCommand).toHaveBeenCalledTimes(1);case 3:case 'end':return _context24.stop();}}}, _callee24, this);}));return function validateFbsimctlisCalledOn(_x, _x2) {return _ref24.apply(this, arguments);};}();function _asyncToGenerator(fn) {return function () {var gen = fn.apply(this, arguments);return new Promise(function (resolve, reject) {function step(key, arg) {try {var info = gen[key](arg);var value = info.value;} catch (error) {reject(error);return;}if (info.done) {resolve(value);} else {return Promise.resolve(value).then(function (value) {step("next", value);}, function (err) {step("throw", err);});}}return step("next");});};}var _ = require('lodash');describe('Fbsimctl', function () {var Fbsimctl = void 0;var fbsimctl = void 0;var exec = void 0;var fs = void 0;var simUdid = '9C9ABE4D-70C7-49DC-A396-3CB1D0E82846';var bundleId = 'bundle.id';beforeEach(function () {jest.mock('npmlog');jest.mock('fs');fs = require('fs');jest.mock('../utils/exec');exec = require('../utils/exec').execWithRetriesAndLogs;Fbsimctl = require('./Fbsimctl');fbsimctl = new Fbsimctl();});it('list() - specify a valid simulator should return that simulator\'s UDID', _asyncToGenerator(regeneratorRuntime.mark(function _callee() {var result;return regeneratorRuntime.wrap(function _callee$(_context) {while (1) {switch (_context.prev = _context.next) {case 0:result = returnSuccessfulWithValue(listAsimUdidAtState(simUdid, "Shutdown"));exec.mockReturnValue(Promise.resolve(result));_context.t0 = expect;_context.next = 5;return fbsimctl.list('iPhone 7');case 5:_context.t1 = _context.sent;_context.t2 = simUdid;(0, _context.t0)(_context.t1).toEqual(_context.t2);case 8:case 'end':return _context.stop();}}}, _callee, undefined);})));it('list() - specify an invalid simulator should throw an Error', _asyncToGenerator(regeneratorRuntime.mark(function _callee2() {var returnValue, result;return regeneratorRuntime.wrap(function _callee2$(_context2) {while (1) {switch (_context2.prev = _context2.next) {case 0:returnValue = {};result = returnSuccessfulWithValue(returnValue);exec.mockReturnValue(Promise.resolve(result));_context2.prev = 3;_context2.next = 6;return fbsimctl.list('iPhone 7');case 6:fail('expected list() to throw');_context2.next = 12;break;case 9:_context2.prev = 9;_context2.t0 = _context2['catch'](3);expect(_context2.t0).toBeDefined();case 12:case 'end':return _context2.stop();}}}, _callee2, undefined, [[3, 9]]);})));it('list() - when something goes wrong in the list retrival process, log the given error error', _asyncToGenerator(regeneratorRuntime.mark(function _callee3() {var returnValue, result;return regeneratorRuntime.wrap(function _callee3$(_context3) {while (1) {switch (_context3.prev = _context3.next) {case 0:returnValue = {};result = returnErrorWithValue(returnValue);exec.mockReturnValue(Promise.reject(result));_context3.prev = 3;_context3.next = 6;return fbsimctl.list('iPhone 7');case 6:fail('expected list() to throw');_context3.next = 12;break;case 9:_context3.prev = 9;_context3.t0 = _context3['catch'](3);expect(_context3.t0).toBeDefined();case 12:case 'end':return _context3.stop();}}}, _callee3, undefined, [[3, 9]]);})));it('boot() - is triggering fbsimctl boot', _asyncToGenerator(regeneratorRuntime.mark(function _callee5() {return regeneratorRuntime.wrap(function _callee5$(_context5) {while (1) {switch (_context5.prev = _context5.next) {case 0:_context5.next = 2;return validateFbsimctlisCalledOn(fbsimctl, _asyncToGenerator(regeneratorRuntime.mark(function _callee4() {return regeneratorRuntime.wrap(function _callee4$(_context4) {while (1) {switch (_context4.prev = _context4.next) {case 0:return _context4.abrupt('return', fbsimctl.boot(simUdid));case 1:case 'end':return _context4.stop();}}}, _callee4, undefined);})));case 2:case 'end':return _context5.stop();}}}, _callee5, undefined);})));it('install() - is triggering fbsimctl install', _asyncToGenerator(regeneratorRuntime.mark(function _callee7() {return regeneratorRuntime.wrap(function _callee7$(_context7) {while (1) {switch (_context7.prev = _context7.next) {case 0:_context7.next = 2;return validateFbsimctlisCalledOn(fbsimctl, _asyncToGenerator(regeneratorRuntime.mark(function _callee6() {return regeneratorRuntime.wrap(function _callee6$(_context6) {while (1) {switch (_context6.prev = _context6.next) {case 0:return _context6.abrupt('return', fbsimctl.install(simUdid, bundleId, {}));case 1:case 'end':return _context6.stop();}}}, _callee6, undefined);})));case 2:case 'end':return _context7.stop();}}}, _callee7, undefined);})));it('uninstall() - is triggering fbsimctl uninstall', _asyncToGenerator(regeneratorRuntime.mark(function _callee9() {return regeneratorRuntime.wrap(function _callee9$(_context9) {while (1) {switch (_context9.prev = _context9.next) {case 0:_context9.next = 2;return validateFbsimctlisCalledOn(fbsimctl, _asyncToGenerator(regeneratorRuntime.mark(function _callee8() {return regeneratorRuntime.wrap(function _callee8$(_context8) {while (1) {switch (_context8.prev = _context8.next) {case 0:return _context8.abrupt('return', fbsimctl.uninstall(simUdid, bundleId));case 1:case 'end':return _context8.stop();}}}, _callee8, undefined);})));case 2:case 'end':return _context9.stop();}}}, _callee9, undefined);})));it('launch() - is triggering fbsimctl launch', _asyncToGenerator(regeneratorRuntime.mark(function _callee11() {return regeneratorRuntime.wrap(function _callee11$(_context11) {while (1) {switch (_context11.prev = _context11.next) {case 0:fs.existsSync.mockReturnValue(true);_context11.next = 3;return validateFbsimctlisCalledOn(fbsimctl, _asyncToGenerator(regeneratorRuntime.mark(function _callee10() {return regeneratorRuntime.wrap(function _callee10$(_context10) {while (1) {switch (_context10.prev = _context10.next) {case 0:return _context10.abrupt('return', fbsimctl.launch(simUdid, bundleId, []));case 1:case 'end':return _context10.stop();}}}, _callee10, undefined);})));case 3:case 'end':return _context11.stop();}}}, _callee11, undefined);})));it('launch() - is triggering fbsimctl launch when no Detox.framework exists', _asyncToGenerator(regeneratorRuntime.mark(function _callee12() {return regeneratorRuntime.wrap(function _callee12$(_context12) {while (1) {switch (_context12.prev = _context12.next) {case 0:fs.existsSync.mockReturnValue(false);fbsimctl._execFbsimctlCommand = jest.fn();_context12.prev = 2;_context12.next = 5;return fbsimctl.launch(simUdid, bundleId, []);case 5:fail('should fail when Detox.framework doesn\'t exist');_context12.next = 11;break;case 8:_context12.prev = 8;_context12.t0 = _context12['catch'](2);expect(_context12.t0).toBeDefined();case 11:case 'end':return _context12.stop();}}}, _callee12, undefined, [[2, 8]]);})));it('terminate() - is triggering fbsimctl terminate', _asyncToGenerator(regeneratorRuntime.mark(function _callee14() {return regeneratorRuntime.wrap(function _callee14$(_context14) {while (1) {switch (_context14.prev = _context14.next) {case 0:_context14.next = 2;return validateFbsimctlisCalledOn(fbsimctl, _asyncToGenerator(regeneratorRuntime.mark(function _callee13() {return regeneratorRuntime.wrap(function _callee13$(_context13) {while (1) {switch (_context13.prev = _context13.next) {case 0:return _context13.abrupt('return', fbsimctl.terminate(simUdid, bundleId));case 1:case 'end':return _context13.stop();}}}, _callee13, undefined);})));case 2:case 'end':return _context14.stop();}}}, _callee14, undefined);})));it('shutdown() - is triggering fbsimctl shutdown', _asyncToGenerator(regeneratorRuntime.mark(function _callee16() {return regeneratorRuntime.wrap(function _callee16$(_context16) {while (1) {switch (_context16.prev = _context16.next) {case 0:_context16.next = 2;return validateFbsimctlisCalledOn(fbsimctl, _asyncToGenerator(regeneratorRuntime.mark(function _callee15() {return regeneratorRuntime.wrap(function _callee15$(_context15) {while (1) {switch (_context15.prev = _context15.next) {case 0:return _context15.abrupt('return', fbsimctl.shutdown(simUdid));case 1:case 'end':return _context15.stop();}}}, _callee15, undefined);})));case 2:case 'end':return _context16.stop();}}}, _callee16, undefined);})));it('open() - is triggering fbsimctl open', _asyncToGenerator(regeneratorRuntime.mark(function _callee18() {return regeneratorRuntime.wrap(function _callee18$(_context18) {while (1) {switch (_context18.prev = _context18.next) {case 0:_context18.next = 2;return validateFbsimctlisCalledOn(fbsimctl, _asyncToGenerator(regeneratorRuntime.mark(function _callee17() {return regeneratorRuntime.wrap(function _callee17$(_context17) {while (1) {switch (_context17.prev = _context17.next) {case 0:return _context17.abrupt('return', fbsimctl.open(simUdid, bundleId));case 1:case 'end':return _context17.stop();}}}, _callee17, undefined);})));case 2:case 'end':return _context18.stop();}}}, _callee18, undefined);})));it('isDeviceBooted() - specify a shutdown simulator', _asyncToGenerator(regeneratorRuntime.mark(function _callee19() {var isDeviceBooted;return regeneratorRuntime.wrap(function _callee19$(_context19) {while (1) {switch (_context19.prev = _context19.next) {case 0:fbsimctl._execFbsimctlCommand = jest.fn(function () {return returnSuccessfulWithValue(listAsimUdidAtState(simUdid, 'Shutdown'));});_context19.next = 3;return fbsimctl.isDeviceBooted(simUdid);case 3:isDeviceBooted = _context19.sent;expect(isDeviceBooted).toBe(true);case 5:case 'end':return _context19.stop();}}}, _callee19, undefined);})));it('isDeviceBooted() - specify a booted simulator', _asyncToGenerator(regeneratorRuntime.mark(function _callee20() {var isDeviceBooted;return regeneratorRuntime.wrap(function _callee20$(_context20) {while (1) {switch (_context20.prev = _context20.next) {case 0:fbsimctl._execFbsimctlCommand = jest.fn(function () {return returnSuccessfulWithValue(listAsimUdidAtState(simUdid, 'Booted'));});_context20.next = 3;return fbsimctl.isDeviceBooted(simUdid);case 3:isDeviceBooted = _context20.sent;expect(isDeviceBooted).toBe(false);case 5:case 'end':return _context20.stop();}}}, _callee20, undefined);})));it('exec simulator command successfully', _asyncToGenerator(regeneratorRuntime.mark(function _callee21() {var result, options;return regeneratorRuntime.wrap(function _callee21$(_context21) {while (1) {switch (_context21.prev = _context21.next) {case 0:result = returnSuccessfulWithValue("");exec.mockReturnValue(Promise.resolve(result));options = { args: 'an argument' };_context21.t0 = expect;_context21.next = 6;return fbsimctl._execFbsimctlCommand(options);case 6:_context21.t1 = _context21.sent;_context21.t2 = result;(0, _context21.t0)(_context21.t1).toEqual(_context21.t2);case 9:case 'end':return _context21.stop();}}}, _callee21, undefined);})));it('exec simulator command with error', _asyncToGenerator(regeneratorRuntime.mark(function _callee22() {var errorResult, options;return regeneratorRuntime.wrap(function _callee22$(_context22) {while (1) {switch (_context22.prev = _context22.next) {case 0:errorResult = returnErrorWithValue('');exec.mockReturnValue(Promise.reject(errorResult));options = { args: 'an argument' };_context22.prev = 3;_context22.next = 6;return fbsimctl._execFbsimctlCommand(options, '', 10, 1);case 6:_context22.next = 11;break;case 8:_context22.prev = 8;_context22.t0 = _context22['catch'](3);expect(_context22.t0).toEqual(errorResult);case 11:case 'end':return _context22.stop();}}}, _callee22, undefined, [[3, 8]]);})));it('exec simulator command with multiple errors and then a success', _asyncToGenerator(regeneratorRuntime.mark(function _callee23() {var successfulResult, resolvedPromise, options;return regeneratorRuntime.wrap(function _callee23$(_context23) {while (1) {switch (_context23.prev = _context23.next) {case 0:successfulResult = returnSuccessfulWithValue('successful result');resolvedPromise = Promise.resolve(successfulResult);exec.mockReturnValueOnce(resolvedPromise);options = { args: 'an argument' };_context23.t0 = expect;_context23.next = 7;return fbsimctl._execFbsimctlCommand(options, '', 10, 1);case 7:_context23.t1 = _context23.sent;_context23.t2 = successfulResult;(0, _context23.t0)(_context23.t1).toEqual(_context23.t2);case 10:case 'end':return _context23.stop();}}}, _callee23, undefined);})));});


function listAsimUdidAtState(udid, state) {
  return {
    "event_type": "discrete",
    "timestamp": 1485328213,
    "subject": {
      "state": state,
      "os": "iOS 10.1",
      "name": "iPhone 7",
      "udid": udid,
      "device-name": "iPhone 7" },

    "event_name": "list" };

}

function returnSuccessfulWithValue(value) {
  var result = {
    stdout: JSON.stringify(value),
    stderr: "",
    childProcess: {
      exitCode: 0 } };


  return result;
}

function returnErrorWithValue(value) {
  var result = {
    stdout: "",
    stderr: value,
    childProcess: {
      exitCode: 1 } };


  return result;
}