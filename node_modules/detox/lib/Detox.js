'use strict';var _createClass = function () {function defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}return function (Constructor, protoProps, staticProps) {if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;};}();function _asyncToGenerator(fn) {return function () {var gen = fn.apply(this, arguments);return new Promise(function (resolve, reject) {function step(key, arg) {try {var info = gen[key](arg);var value = info.value;} catch (error) {reject(error);return;}if (info.done) {resolve(value);} else {return Promise.resolve(value).then(function (value) {step("next", value);}, function (err) {step("throw", err);});}}return step("next");});};}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}var log = require('npmlog');
var IosNoneDevice = require('./devices/IosNoneDevice');
var Simulator = require('./devices/Simulator');
var argparse = require('./utils/argparse');
var InvocationManager = require('./invoke').InvocationManager;
var configuration = require('./configuration');
var Client = require('./client/Client');
var DetoxServer = require('detox-server');
var URL = require('url').URL;
var _ = require('lodash');

log.level = argparse.getArgValue('loglevel') || 'info';
log.addLevel('wss', 999, { fg: 'blue', bg: 'black' }, 'wss');
log.heading = 'detox';var

Detox = function () {

  function Detox(userConfig) {_classCallCheck(this, Detox);
    if (!userConfig) {
      throw new Error('No configuration was passed to detox, make sure you pass a config when calling \'detox.init(config)\'');
    }

    this.client = null;
    this.userConfig = userConfig;
    this.detoxConfig = {};
  }_createClass(Detox, [{ key: 'config', value: function () {var _ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee() {var server;return regeneratorRuntime.wrap(function _callee$(_context) {while (1) {switch (_context.prev = _context.next) {case 0:if (


                this.userConfig.configurations && _.size(this.userConfig.configurations) >= 1) {_context.next = 2;break;}throw (
                  new Error('no configured devices'));case 2:


                this.detoxConfig.configurations = this.userConfig.configurations;if (!

                this.userConfig.session) {_context.next = 8;break;}
                configuration.validateSession(this.userConfig.session);
                this.detoxConfig.session = this.userConfig.session;_context.next = 12;break;case 8:_context.next = 10;return (

                  configuration.defaultSession());case 10:this.detoxConfig.session = _context.sent;
                server = new DetoxServer(new URL(this.detoxConfig.session.server).port);case 12:return _context.abrupt('return',

                this.detoxConfig);case 13:case 'end':return _context.stop();}}}, _callee, this);}));function config() {return _ref.apply(this, arguments);}return config;}() }, { key: 'init', value: function () {var _ref2 = _asyncToGenerator(regeneratorRuntime.mark(function _callee2() {return regeneratorRuntime.wrap(function _callee2$(_context2) {while (1) {switch (_context2.prev = _context2.next) {case 0:_context2.next = 2;return (



                  this.config());case 2:
                this.client = new Client(this.detoxConfig.session);_context2.next = 5;return (
                  this.client.connect());case 5:_context2.next = 7;return (
                  this.initConfiguration());case 7:case 'end':return _context2.stop();}}}, _callee2, this);}));function init() {return _ref2.apply(this, arguments);}return init;}() }, { key: 'cleanup', value: function () {var _ref3 = _asyncToGenerator(regeneratorRuntime.mark(function _callee3() {return regeneratorRuntime.wrap(function _callee3$(_context3) {while (1) {switch (_context3.prev = _context3.next) {case 0:if (!



                this.client) {_context3.next = 3;break;}_context3.next = 3;return (
                  this.client.cleanup());case 3:if (!


                argparse.getArgValue('cleanup')) {_context3.next = 6;break;}_context3.next = 6;return (
                  this.device.shutdown());case 6:case 'end':return _context3.stop();}}}, _callee3, this);}));function cleanup() {return _ref3.apply(this, arguments);}return cleanup;}() }, { key: 'initConfiguration', value: function () {var _ref4 = _asyncToGenerator(regeneratorRuntime.mark(function _callee4() {var configurationName, deviceConfig;return regeneratorRuntime.wrap(function _callee4$(_context4) {while (1) {switch (_context4.prev = _context4.next) {case 0:




                configurationName = argparse.getArgValue('configuration');

                deviceConfig = void 0;
                if (!configurationName && _.size(this.detoxConfig.configurations) === 1) {
                  deviceConfig = _.values(this.detoxConfig.configurations)[0];
                } else {
                  deviceConfig = this.detoxConfig.configurations[configurationName];
                }if (

                deviceConfig) {_context4.next = 5;break;}throw (
                  new Error('Cannot determine which configuration to use. use --configuration to choose one of the following: \n                      ' +
                  Object.keys(this.detoxConfig.configurations)));case 5:_context4.t0 =


                deviceConfig.type;_context4.next = _context4.t0 ===
                "ios.simulator" ? 8 : _context4.t0 ===


                "ios.none" ? 11 : 14;break;case 8:_context4.next = 10;return this.initIosSimulator(deviceConfig);case 10:return _context4.abrupt('break', 15);case 11:_context4.next = 13;return (
                  this.initIosNoneDevice(deviceConfig));case 13:return _context4.abrupt('break', 15);case 14:throw (


                  new Error('only simulator is supported currently'));case 15:case 'end':return _context4.stop();}}}, _callee4, this);}));function initConfiguration() {return _ref4.apply(this, arguments);}return initConfiguration;}() }, { key: 'setDevice', value: function () {var _ref5 = _asyncToGenerator(regeneratorRuntime.mark(function _callee5(



      device, deviceConfig) {return regeneratorRuntime.wrap(function _callee5$(_context5) {while (1) {switch (_context5.prev = _context5.next) {case 0:
                this.device = new device(this.client, this.detoxConfig.session, deviceConfig);_context5.next = 3;return (
                  this.device.prepare());case 3:
                global.device = this.device;case 4:case 'end':return _context5.stop();}}}, _callee5, this);}));function setDevice(_x, _x2) {return _ref5.apply(this, arguments);}return setDevice;}() }, { key: 'initIosExpectations', value: function () {var _ref6 = _asyncToGenerator(regeneratorRuntime.mark(function _callee6() {return regeneratorRuntime.wrap(function _callee6$(_context6) {while (1) {switch (_context6.prev = _context6.next) {case 0:



                this.expect = require('./ios/expect');
                this.expect.exportGlobals();
                this.expect.setInvocationManager(new InvocationManager(this.client));case 3:case 'end':return _context6.stop();}}}, _callee6, this);}));function initIosExpectations() {return _ref6.apply(this, arguments);}return initIosExpectations;}() }, { key: 'initIosSimulator', value: function () {var _ref7 = _asyncToGenerator(regeneratorRuntime.mark(function _callee7(


      deviceConfig) {return regeneratorRuntime.wrap(function _callee7$(_context7) {while (1) {switch (_context7.prev = _context7.next) {case 0:_context7.next = 2;return (
                  this.initIosExpectations());case 2:_context7.next = 4;return (
                  this.setDevice(Simulator, deviceConfig));case 4:case 'end':return _context7.stop();}}}, _callee7, this);}));function initIosSimulator(_x3) {return _ref7.apply(this, arguments);}return initIosSimulator;}() }, { key: 'initIosNoneDevice', value: function () {var _ref8 = _asyncToGenerator(regeneratorRuntime.mark(function _callee8(


      deviceConfig) {return regeneratorRuntime.wrap(function _callee8$(_context8) {while (1) {switch (_context8.prev = _context8.next) {case 0:_context8.next = 2;return (
                  this.initIosExpectations());case 2:_context8.next = 4;return (
                  this.setDevice(IosNoneDevice, deviceConfig));case 4:case 'end':return _context8.stop();}}}, _callee8, this);}));function initIosNoneDevice(_x4) {return _ref8.apply(this, arguments);}return initIosNoneDevice;}() }]);return Detox;}();



module.exports = Detox;