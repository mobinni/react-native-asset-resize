'use strict';var retry = function () {var _ref = _asyncToGenerator(regeneratorRuntime.mark(


  function _callee2(options, func) {var _this = this;var _options, retries, interval, currentRetry;return regeneratorRuntime.wrap(function _callee2$(_context2) {while (1) {switch (_context2.prev = _context2.next) {case 0:
            if (typeof options === 'function') {
              func = options;
              options = {};
            }_options =

            options, retries = _options.retries, interval = _options.interval;
            retries = retries || DEFAULT_RETRIES;
            interval = interval || DEFAULT_INTERVAL;

            currentRetry = 0;case 5:if (!(
            currentRetry++ < retries)) {_context2.next = 21;break;}_context2.prev = 6;_context2.next = 9;return (

              func(currentRetry));case 9:return _context2.abrupt('return', _context2.sent);case 12:_context2.prev = 12;_context2.t0 = _context2['catch'](6);if (!(

            currentRetry === retries)) {_context2.next = 18;break;}throw _context2.t0;case 18:return _context2.delegateYield(regeneratorRuntime.mark(function _callee() {var sleep;return regeneratorRuntime.wrap(function _callee$(_context) {while (1) {switch (_context.prev = _context.next) {case 0:


                      sleep = currentRetry * interval;_context.next = 3;return (
                        new Promise(function (accept) {return setTimeout(accept, sleep);}));case 3:case 'end':return _context.stop();}}}, _callee, _this);})(), 't1', 19);case 19:_context2.next = 5;break;case 21:case 'end':return _context2.stop();}}}, _callee2, this, [[6, 12]]);}));return function retry(_x, _x2) {return _ref.apply(this, arguments);};}();function _asyncToGenerator(fn) {return function () {var gen = fn.apply(this, arguments);return new Promise(function (resolve, reject) {function step(key, arg) {try {var info = gen[key](arg);var value = info.value;} catch (error) {reject(error);return;}if (info.done) {resolve(value);} else {return Promise.resolve(value).then(function (value) {step("next", value);}, function (err) {step("throw", err);});}}return step("next");});};}var DEFAULT_RETRIES = 10;var DEFAULT_INTERVAL = 500;





module.exports = retry;