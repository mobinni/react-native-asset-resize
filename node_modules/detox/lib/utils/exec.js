'use strict';var execWithRetriesAndLogs = function () {var _ref = _asyncToGenerator(regeneratorRuntime.mark(





  function _callee2(bin, options, statusLogs) {var _this = this;var retries = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 10;var interval = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1000;var cmd, result;return regeneratorRuntime.wrap(function _callee2$(_context2) {while (1) {switch (_context2.prev = _context2.next) {case 0:
            _operationCounter++;

            cmd = void 0;
            if (options) {
              cmd = '' + (options.prefix ? options.prefix + ' && ' : '') + bin + ' ' + options.args;
            } else {
              cmd = bin;
            }

            log.verbose(_operationCounter + ': ' + cmd);

            result = void 0;_context2.next = 7;return (
              retry({ retries: retries, interval: interval }, _asyncToGenerator(regeneratorRuntime.mark(function _callee() {return regeneratorRuntime.wrap(function _callee$(_context) {while (1) {switch (_context.prev = _context.next) {case 0:
                        if (statusLogs && statusLogs.trying) {
                          log.info(_operationCounter + ': ' + statusLogs.trying);
                        }_context.next = 3;return (
                          exec(cmd));case 3:result = _context.sent;case 4:case 'end':return _context.stop();}}}, _callee, _this);}))));case 7:if (!(

            result === undefined)) {_context2.next = 9;break;}throw (
              new Error(_operationCounter + ': running "' + cmd + '" returned undefined'));case 9:


            if (result.stdout) {
              log.silly(_operationCounter + ': stdout:', result.stdout);
            }

            if (result.stderr) {
              log.silly(_operationCounter + ': stderr:', result.stderr);
            }

            if (statusLogs && statusLogs.successful) {
              log.info(_operationCounter + ': ' + statusLogs.successful);
            }

            //if (result.childProcess.exitCode !== 0) {
            //  log.error(`${_operationCounter}: stdout:`, result.stdout);
            //  log.error(`${_operationCounter}: stderr:`, result.stderr);
            //}
            return _context2.abrupt('return',
            result);case 13:case 'end':return _context2.stop();}}}, _callee2, this);}));return function execWithRetriesAndLogs(_x, _x2, _x3) {return _ref.apply(this, arguments);};}();function _asyncToGenerator(fn) {return function () {var gen = fn.apply(this, arguments);return new Promise(function (resolve, reject) {function step(key, arg) {try {var info = gen[key](arg);var value = info.value;} catch (error) {reject(error);return;}if (info.done) {resolve(value);} else {return Promise.resolve(value).then(function (value) {step("next", value);}, function (err) {step("throw", err);});}}return step("next");});};}var log = require('npmlog');var retry = require('../utils/retry');var exec = require('child-process-promise').exec;var _operationCounter = 0;


module.exports = {
  execWithRetriesAndLogs: execWithRetriesAndLogs };