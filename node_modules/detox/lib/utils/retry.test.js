'use strict';function _asyncToGenerator(fn) {return function () {var gen = fn.apply(this, arguments);return new Promise(function (resolve, reject) {function step(key, arg) {try {var info = gen[key](arg);var value = info.value;} catch (error) {reject(error);return;}if (info.done) {resolve(value);} else {return Promise.resolve(value).then(function (value) {step("next", value);}, function (err) {step("throw", err);});}}return step("next");});};}describe('retry', function () {
  var retry = void 0;

  beforeEach(function () {
    retry = require('./retry');
  });

  it('a promise that rejects two times and then resolves, with default params', _asyncToGenerator(regeneratorRuntime.mark(function _callee() {var mockFn;return regeneratorRuntime.wrap(function _callee$(_context) {while (1) {switch (_context.prev = _context.next) {case 0:
            mockFn = jest.fn().
            mockReturnValueOnce(Promise.reject()).
            mockReturnValueOnce(Promise.resolve());_context.next = 3;return (
              retry(mockFn));case 3:
            expect(mockFn).toHaveBeenCalledTimes(2);case 4:case 'end':return _context.stop();}}}, _callee, undefined);})));


  it('a promise that rejects two times and then resolves, with custom params', _asyncToGenerator(regeneratorRuntime.mark(function _callee2() {var mockFn;return regeneratorRuntime.wrap(function _callee2$(_context2) {while (1) {switch (_context2.prev = _context2.next) {case 0:
            mockFn = jest.fn().
            mockReturnValueOnce(Promise.reject()).
            mockReturnValueOnce(Promise.resolve());_context2.next = 3;return (
              retry({ retries: 2, interval: 1 }, mockFn));case 3:
            expect(mockFn).toHaveBeenCalledTimes(2);case 4:case 'end':return _context2.stop();}}}, _callee2, undefined);})));


  it('a promise that rejects two times, with two retries', _asyncToGenerator(regeneratorRuntime.mark(function _callee3() {var mockFn;return regeneratorRuntime.wrap(function _callee3$(_context3) {while (1) {switch (_context3.prev = _context3.next) {case 0:
            mockFn = jest.fn().
            mockReturnValueOnce(Promise.reject('a thing')).
            mockReturnValueOnce(Promise.reject('a thing'));_context3.prev = 1;_context3.next = 4;return (

              retry({ retries: 2, interval: 1 }, mockFn));case 4:
            fail('expected retry to fail to throw');_context3.next = 11;break;case 7:_context3.prev = 7;_context3.t0 = _context3['catch'](1);

            expect(mockFn).toHaveBeenCalledTimes(2);
            expect(_context3.t0).toBeDefined();case 11:case 'end':return _context3.stop();}}}, _callee3, undefined, [[1, 7]]);})));


});