'use strict';function _asyncToGenerator(fn) {return function () {var gen = fn.apply(this, arguments);return new Promise(function (resolve, reject) {function step(key, arg) {try {var info = gen[key](arg);var value = info.value;} catch (error) {reject(error);return;}if (info.done) {resolve(value);} else {return Promise.resolve(value).then(function (value) {step("next", value);}, function (err) {step("throw", err);});}}return step("next");});};}var _ = require('lodash');
var schemes = require('./configurations.mock');

describe('configuration', function () {
  var configuration = void 0;
  beforeEach(function () {
    configuration = require('./configuration');
  });

  it('generate a default config', _asyncToGenerator(regeneratorRuntime.mark(function _callee() {var config;return regeneratorRuntime.wrap(function _callee$(_context) {while (1) {switch (_context.prev = _context.next) {case 0:_context.next = 2;return (
              configuration.defaultSession());case 2:config = _context.sent;
            expect(function () {return config.session.server;}).toBeDefined();
            expect(function () {return config.session.sessionId;}).toBeDefined();case 5:case 'end':return _context.stop();}}}, _callee, undefined);})));


  it('providing a valid config', function () {
    expect(function () {return configuration.validateSession(schemes.validOneDeviceAndSession.session);}).not.toThrow();
  });

  it('providing empty server config should throw', function () {
    testFaultySession();
  });

  it('providing server config with no session should throw', function () {
    testFaultySession(schemes.validOneDeviceNoSession.session);
  });

  it('providing server config with no session.server should throw', function () {
    testFaultySession(schemes.invalidSessionNoServer.session);
  });

  it('providing server config with no session.sessionId should throw', function () {
    testFaultySession(schemes.invalidSessionNoSessionId.session);
  });

  function testFaultySession(config) {
    try {
      configuration.validateSession(config);
    } catch (ex) {
      expect(ex).toBeDefined();
    }
  }
});