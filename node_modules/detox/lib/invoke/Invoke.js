'use strict';function call(target, method) {for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {args[_key - 2] = arguments[_key];}
  return function () {
    if (typeof target === 'function') {
      target = {
        type: 'Invocation',
        value: target() };

    }
    for (var i = 0; i < args.length; i++) {
      if (typeof args[i] === 'function') {
        args[i] = {
          type: 'Invocation',
          value: args[i]() };

      }
    }
    return {
      target: target,
      method: method,
      args: args };

  };
}

var genericInvokeObject = new Proxy({},
{
  get: function get(target, prop) {
    return function (p) {
      return {
        type: prop,
        value: p };

    };
  } });


module.exports = {
  call: call,
  genericInvokeObject: genericInvokeObject };